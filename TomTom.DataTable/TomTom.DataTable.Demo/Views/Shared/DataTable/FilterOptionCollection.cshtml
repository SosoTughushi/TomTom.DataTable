@using System.Collections
@using TomTom.DataTable
@using TomTom.DataTable.Razor
@model TomTom.DataTable.DataGridFilters

@{
    //Item1 is order
    var filters = new List<Tuple<FilterOption, MvcHtmlString>>();

    //good luck in understanding following lines ;)


    filters.AddRange(Model.BoolFilterOptions.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.BoolFilterOptions[i], Model.BoolFilterOptions[i].EditorTemplateName ?? "DataGrid/BoolFilter"))));

    filters.AddRange(Model.BoolFilterOptionsNullable.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.BoolFilterOptionsNullable[i], Model.BoolFilterOptionsNullable[i].EditorTemplateName ?? "DataGrid/NullableBoolFilter"))));

    filters.AddRange(Model.DateTimeFilterOptions.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.DateTimeFilterOptions[i], Model.DateTimeFilterOptions[i].EditorTemplateName ?? "DataGrid/DateTimeFilter"))));


    filters.AddRange(Model.DateTimeFilterOptionsNullable.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.DateTimeFilterOptionsNullable[i], Model.DateTimeFilterOptionsNullable[i].EditorTemplateName ?? "DataGrid/NullableDateTimeFilter"))));

    filters.AddRange(Model.DecimalFilterOptions.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.DecimalFilterOptions[i], Model.DecimalFilterOptions[i].EditorTemplateName ?? "DataTable/SimpleFilterOption"))));

    filters.AddRange(Model.DecimalFilterOptionsNullable.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.DecimalFilterOptionsNullable[i], Model.DecimalFilterOptionsNullable[i].EditorTemplateName ?? "DataTable/SimpleFilterOption"))));

    filters.AddRange(Model.DoubleFilterOptions.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.DoubleFilterOptions[i], Model.DoubleFilterOptions[i].EditorTemplateName ?? "DataTable/SimpleFilterOption"))));

    filters.AddRange(Model.DoubleFilterOptionsNullable.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.DoubleFilterOptionsNullable[i], Model.DoubleFilterOptionsNullable[i].EditorTemplateName ?? "DataTable/SimpleFilterOption"))));

    filters.AddRange(Model.FloatFilterOptions.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.FloatFilterOptions[i], Model.FloatFilterOptions[i].EditorTemplateName ?? "DataTable/SimpleFilterOption"))));

    filters.AddRange(Model.FloatFilterOptionsNullable.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.FloatFilterOptionsNullable[i], Model.FloatFilterOptionsNullable[i].EditorTemplateName ?? "DataTable/SimpleFilterOption"))));

    filters.AddRange(Model.IntFilterOptions.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.IntFilterOptions[i], Model.IntFilterOptions[i].EditorTemplateName ?? "DataTable/SimpleFilterOption"))));

    filters.AddRange(Model.IntFilterOptionsNullable.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.IntFilterOptionsNullable[i], Model.IntFilterOptionsNullable[i].EditorTemplateName ?? "DataTable/SimpleFilterOption"))));

    filters.AddRange(Model.StringFilterOptions.Select((m, i) => new Tuple<FilterOption, MvcHtmlString>(m,
        Html.EditorFor(model => model.StringFilterOptions[i], Model.StringFilterOptions[i].EditorTemplateName ?? "DataTable/SimpleFilterOption"))));


    var controllerName = Model.Parameters.DataTableControllerType.Name;

    MvcHtmlString itemsPerPage = null;

    if (Model.Parameters.HasItemsPerPageFilter)
    {
        if (Model.Parameters.ItemsPerPage.HasValue)
        {
            Model.PagingAndOrderingInfo.ItemsPerPage = Model.Parameters.ItemsPerPage.Value;
        }

        itemsPerPage = !string.IsNullOrEmpty(Model.Parameters.ItemsPerPageEditorTemplateName) ?
                    Html.EditorFor(m => m.PagingAndOrderingInfo.ItemsPerPage, Model.Parameters.ItemsPerPageEditorTemplateName) :
                    Html.EditorFor(m => m.PagingAndOrderingInfo.ItemsPerPage, "DataTable/ItemsPerPage");

    }
    else
    {
        filters.Add(new Tuple<FilterOption, MvcHtmlString>(new FilterOption<int>() { PropName = "ItemsPerPage" }, Html.HiddenFor(m => m.PagingAndOrderingInfo.ItemsPerPage)));
    }

    var filterButton = MvcHtmlString.Create(string.Format("<input type='submit' value='Filter' class='btn btn-default {0}' />", Model.Parameters.IsFiltrable ? "" : "hidden"));


    <form action="@Url.Action("ProvideDataGridData", controllerName.Substring(0, controllerName.Length - 10))"
          method="POST"
          class="DataGridFilters form-horizontal">



        @if (Model.Parameters.FilterPartialName == null)
        {
            foreach (var filter in filters.OrderBy(m => m.Item1.Order))
            {
                @filter.Item2
            }
        }
        else
        {

            var m = new DataGridFilterDisplay(filters, filterButton, itemsPerPage);
            @Html.Partial(Model.Parameters.FilterPartialName, m)
        }
        @Html.HiddenFor(m => m.PagingAndOrderingInfo.Offset, new { @class = "offset" })
        @Html.HiddenFor(m => m.PagingAndOrderingInfo.IsSortDirectionAscending, new { @class = "sortDirection" })
        @Html.HiddenFor(m => m.PagingAndOrderingInfo.OrderingField, new { @class = "orderby" })
        @Html.HiddenFor(m => m.TableId)

    </form>

}